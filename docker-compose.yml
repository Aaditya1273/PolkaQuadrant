version: '3.9'

# ============================================
# PolkaQuadrant - Local Development Environment
# Docker Compose Configuration
# ============================================

services:
  # ==========================================
  # PostgreSQL Database
  # ==========================================
  postgres:
    image: postgres:16-alpine
    container_name: polkaquadrant-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: polkaquadrant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres123}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/src/db:/docker-entrypoint-initdb.d:ro
    networks:
      - polkaquadrant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # Redis Cache
  # ==========================================
  redis:
    image: redis:7-alpine
    container_name: polkaquadrant-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis123}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - polkaquadrant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ==========================================
  # Backend API
  # ==========================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runner
    container_name: polkaquadrant-backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-postgres123}@postgres:5432/polkaquadrant
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379
      SUPABASE_URL: ${SUPABASE_URL}
      SUPABASE_KEY: ${SUPABASE_KEY}
      CORS_ORIGIN: http://localhost:3000
      LOG_LEVEL: debug
    ports:
      - "4000:4000"
    volumes:
      - ./backend/src:/app/src:ro
      - ./backend/dist:/app/dist
      - backend_node_modules:/app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - polkaquadrant-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # Frontend Dashboard
  # ==========================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: runner
    container_name: polkaquadrant-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:4000
      NEXT_PUBLIC_WS_URL: ws://localhost:4000
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/app/src:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/.next:/app/.next
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - polkaquadrant-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==========================================
  # Nginx Reverse Proxy (Optional)
  # ==========================================
  nginx:
    image: nginx:alpine
    container_name: polkaquadrant-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - polkaquadrant-network
    profiles:
      - production

  # ==========================================
  # Substrate Local Node (Optional)
  # ==========================================
  substrate:
    image: parity/substrate:latest
    container_name: polkaquadrant-substrate
    restart: unless-stopped
    command: --dev --ws-external --rpc-external --rpc-cors all
    ports:
      - "9944:9944"
      - "9933:9933"
      - "30333:30333"
    volumes:
      - substrate_data:/data
    networks:
      - polkaquadrant-network
    profiles:
      - blockchain

# ==========================================
# Networks
# ==========================================
networks:
  polkaquadrant-network:
    driver: bridge
    name: polkaquadrant-network

# ==========================================
# Volumes
# ==========================================
volumes:
  postgres_data:
    name: polkaquadrant-postgres-data
  redis_data:
    name: polkaquadrant-redis-data
  backend_node_modules:
    name: polkaquadrant-backend-node-modules
  frontend_node_modules:
    name: polkaquadrant-frontend-node-modules
  substrate_data:
    name: polkaquadrant-substrate-data
