openapi: 3.1.0
info:
  title: PolkaQuadrant API
  description: |
    AI-Secured Quadratic Funding Validator for Polkadot Ecosystem
    
    Complete API for fraud detection, metrics tracking, beta testing, and blockchain queries.
  version: 1.0.0
  contact:
    name: PolkaQuadrant Team
    email: api@polkaquadrant.io
    url: https://polkaquadrant.io
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4000/api/v1
    description: Local development
  - url: https://polkaquadrant-backend.up.railway.app/api/v1
    description: Production

tags:
  - name: Fraud Detection
    description: AI-powered fraud detection endpoints
  - name: Metrics
    description: System metrics and analytics
  - name: Beta Testing
    description: Beta testing feedback and surveys
  - name: Blockchain
    description: Mainnet query endpoints

paths:
  /ai/analyze-contribution:
    post:
      tags:
        - Fraud Detection
      summary: Analyze single contribution
      description: Analyze a contribution for fraud patterns using AI
      operationId: analyzeContribution
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContributionInput'
            examples:
              basic:
                value:
                  contributorAddress: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb"
                  projectId: "proj_123"
                  amount: 100
                  timestamp: "2024-01-30T12:00:00Z"
      responses:
        '200':
          description: Analysis successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FraudAnalysisResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

  /ai/analyze-round:
    post:
      tags:
        - Fraud Detection
      summary: Analyze funding round
      description: Batch analysis of all contributions in a round
      operationId: analyzeRound
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoundAnalysisInput'
      responses:
        '200':
          description: Round analysis complete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoundAnalysisResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /ai/risk-report/{roundId}:
    get:
      tags:
        - Fraud Detection
      summary: Get risk report
      description: Comprehensive risk report for a funding round
      operationId: getRiskReport
      parameters:
        - name: roundId
          in: path
          required: true
          schema:
            type: string
          example: "round_123"
        - name: format
          in: query
          schema:
            type: string
            enum: [json, pdf, csv]
            default: json
        - name: includeDetails
          in: query
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Risk report generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskReport'
        '404':
          $ref: '#/components/responses/NotFound'

  /metrics/overview:
    get:
      tags:
        - Metrics
      summary: Get metrics overview
      description: System-wide metrics and statistics
      operationId: getMetricsOverview
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [24h, 7d, 30d, all]
            default: 24h
        - name: includeCharts
          in: query
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Metrics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsOverview'

  /metrics/coverage:
    get:
      tags:
        - Metrics
      summary: Get coverage metrics
      description: Test coverage statistics
      operationId: getCoverageMetrics
      responses:
        '200':
          description: Coverage data retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CoverageMetrics'

  /metrics/performance:
    get:
      tags:
        - Metrics
      summary: Get performance metrics
      description: API performance benchmarks
      operationId: getPerformanceMetrics
      parameters:
        - name: endpoint
          in: query
          schema:
            type: string
        - name: period
          in: query
          schema:
            type: string
            default: 24h
      responses:
        '200':
          description: Performance data retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PerformanceMetrics'

  /feedback/submit:
    post:
      tags:
        - Beta Testing
      summary: Submit feedback
      description: Submit beta testing feedback
      operationId: submitFeedback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FeedbackInput'
      responses:
        '201':
          description: Feedback submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackResponse'
        '400':
          $ref: '#/components/responses/BadRequest'

  /feedback/stats:
    get:
      tags:
        - Beta Testing
      summary: Get feedback statistics
      description: Aggregated feedback analytics
      operationId: getFeedbackStats
      parameters:
        - name: testerId
          in: query
          schema:
            type: string
        - name: period
          in: query
          schema:
            type: string
            default: all
      responses:
        '200':
          description: Statistics retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeedbackStats'

  /blockchain/rounds:
    get:
      tags:
        - Blockchain
      summary: Get funding rounds
      description: Query funding rounds from blockchain
      operationId: getFundingRounds
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, completed, upcoming, all]
            default: all
        - name: network
          in: query
          schema:
            type: string
            enum: [rococo, acala, local]
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
        - name: offset
          in: query
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Rounds retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FundingRoundsResponse'

  /blockchain/projects/{id}:
    get:
      tags:
        - Blockchain
      summary: Get project details
      description: Detailed project information
      operationId: getProjectDetails
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: includeContributions
          in: query
          schema:
            type: boolean
            default: true
        - name: network
          in: query
          schema:
            type: string
            default: rococo
      responses:
        '200':
          description: Project details retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDetails'
        '404':
          $ref: '#/components/responses/NotFound'

  /blockchain/contributions/{roundId}:
    get:
      tags:
        - Blockchain
      summary: Get round contributions
      description: All contributions for a funding round
      operationId: getRoundContributions
      parameters:
        - name: roundId
          in: path
          required: true
          schema:
            type: string
        - name: projectId
          in: query
          schema:
            type: string
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [amount, timestamp]
            default: timestamp
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
      responses:
        '200':
          description: Contributions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContributionsResponse'

components:
  schemas:
    ContributionInput:
      type: object
      required:
        - contributorAddress
        - amount
      properties:
        contributorAddress:
          type: string
          example: "0x742d35Cc6634C0532925a3b844Bc9e7595f0bEb"
        projectId:
          type: string
          example: "proj_123"
        amount:
          type: number
          example: 100
        timestamp:
          type: string
          format: date-time
        metadata:
          type: object

    FraudAnalysisResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            fraudScore:
              type: number
              example: 0.15
            isFraudulent:
              type: boolean
            confidence:
              type: number
            patterns:
              type: object
            riskLevel:
              type: string
              enum: [low, medium, high, critical]

    RoundAnalysisInput:
      type: object
      required:
        - contributions
      properties:
        roundId:
          type: string
        contributions:
          type: array
          items:
            $ref: '#/components/schemas/ContributionInput'
        threshold:
          type: number
          default: 0.7

    RoundAnalysisResponse:
      type: object
      properties:
        success:
          type: boolean
        roundId:
          type: string
        data:
          type: object
          properties:
            summary:
              type: object
              properties:
                total:
                  type: integer
                flagged:
                  type: integer
                flaggedPercentage:
                  type: number
                averageRiskScore:
                  type: number

    RiskReport:
      type: object
      properties:
        success:
          type: boolean
        roundId:
          type: string
        report:
          type: object
          properties:
            overview:
              type: object
            fraudPatterns:
              type: object
            recommendations:
              type: array
              items:
                type: string

    MetricsOverview:
      type: object
      properties:
        success:
          type: boolean
        metrics:
          type: object
          properties:
            contributions:
              type: object
            fraudDetection:
              type: object
            performance:
              type: object

    CoverageMetrics:
      type: object
      properties:
        success:
          type: boolean
        coverage:
          type: object
          properties:
            overall:
              type: object
              properties:
                lines:
                  type: number
                branches:
                  type: number
                functions:
                  type: number

    PerformanceMetrics:
      type: object
      properties:
        success:
          type: boolean
        performance:
          type: object

    FeedbackInput:
      type: object
      required:
        - testerId
        - testerName
        - usabilityScore
      properties:
        testerId:
          type: string
        testerName:
          type: string
        organization:
          type: string
        country:
          type: string
        usabilityScore:
          type: number
          minimum: 0
          maximum: 5
        featureRatings:
          type: object
        comments:
          type: string
        category:
          type: string
        priority:
          type: string
          enum: [low, medium, high]

    FeedbackResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object

    FeedbackStats:
      type: object
      properties:
        success:
          type: boolean
        stats:
          type: object

    FundingRoundsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            rounds:
              type: array
              items:
                type: object

    ProjectDetails:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object

    ContributionsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        code:
          type: string

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security: []
